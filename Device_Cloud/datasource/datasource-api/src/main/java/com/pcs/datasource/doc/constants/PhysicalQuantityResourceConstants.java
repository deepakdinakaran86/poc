package com.pcs.datasource.doc.constants;

public class PhysicalQuantityResourceConstants extends ResourceConstants {
	
	public static final String INSERT_PHYSICAL_QUANTITY_SUMMARY = "Create a physical quantity";
	public static final String INSERT_PHYSICAL_QUANTITY_DESC = "This is the service to be used to create new physical quantity ,sample payload : {\"dataStore\":\"current\",\"name\":\"current\",\"units\":[{\"conversion\":\"-\",\"isSi\":true,\"name\":\"ampere\",\"desc\":\"The ampere is the intensity of a constant current which, if maintained in two straight  parallel conductors of infinite length, of negligible circular cross-section, and  placed 1 metre apart in vacuum, would produce between these conductors a  force equal to 2 x 10-7 newton per metre of length.\",\"symbol\":\"A\"}]}";

	public static final String UPDATE_PHYSICAL_QUANTITY_SUMMARY = "Update an existing physical quantity";
	public static final String UPDATE_PHYSICAL_QUANTITY_DESC = "This is the service to be used to update an existing physical quantity,sample payload :{ \"name\":\"Test PQ Create Update 1\", \"dataStore\":\"test_store\", \"statusKey\":0, \"status\":\"ACTIVE\" }";

	public static final String DELETE_PHYSICAL_QUANTITY_SUMMARY = "Delete an existing physical quantity";
	public static final String DELETE_PHYSICAL_QUANTITY_DESC = "This is the service to be used to delete an existing physical quantity,sample payload :{\"name\":\"ConfigWithNoParamTest10\",\"deviceMake\":\"PCS\",\"deviceType\":\"Edge Device\",\"deviceModel\":\"EDCP\",\"deviceProtocol\":\"EDCP\",\"deviceProtocolVersion\":\"1.0.0\",\"configPoints\":[{\"pointId\":\"11\",\"pointName\":\"AI108\",\"displayName\":\"Door Access\",\"physicalQuantity\":\"generic_quantity\",\"dataType\":\"float\",\"precedence\":\"2\",\"systemTag\":\"Door\",\"customTags\":[],\"extensions\":[{\"extensionType\":\"ACCESS TYPE\",\"extensionName\":\"READONLY\"},{\"extensionType\":\"Acquisition Mode\",\"extensionName\":\"STATECHANGE ACQUISITION\"}],\"alarmExtensions\":[{\"extensionName\":\"STATE CHANGE ALARM\",\"extensionType\":\"ALARM\",\"criticality\":\"MAINTENANCE\",\"alarmMessage\":\"AlarmActive\",\"normalMessage\":\"Normal\",\"upperThresholdAlarmMessage\":\"This operation is not supported for StateChangeAlarm\",\"lowerThresholdAlarmMessage\":\"This operation is not supported for StateChangeAlarm\",\"upperThresholdNormalMessage\":\"This operation is not supported for StateChangeAlarm\",\"lowerThresholdNormalMessage\":\"This operation is not supported for StateChangeAlarm\"}]}]}";

	public static final String GET_ALL_PHYSICAL_QUANTITY_SUMMARY = "Get all active physical quantites";
	public static final String GET_ALL_PHYSICAL_QUANTITY_DESC = "This is the service to be used to get all active physical quantities";
	public final static String GET_ALL_PHYSICAL_QUANTITY_SUCCESS_RESP = "[{\"dataStore\":\"volume\",\"status\":\"active\",\"name\":\"volume\",\"statusKey\":0}]";
	
	public static final String GET_PHYSICAL_QUANTITY_SUMMARY = "Get all active physical quantity details";
	public static final String GET_PHYSICAL_QUANTITY_DESC = "This is the service to be used to get the details of a active ";
	public final static String GET_PHYSICAL_QUANTITY_SUCCESS_RESP = "{\"dataStore\":\"volume\",\"status\":\"active\",\"name\":\"volume\",\"statusKey\":0}";

	
	public static final String GET_DEVICE_CONFIG_TEMPLATE_SUMMARY = "Get device configuration template";
	public static final String GET_DEVICE_CONFIG_TEMPLATE_DESC = "This is the service to be used to get an existing device configuration template,sample payload :{\"make\":\"Teltonika\",\"deviceType\":\"Telematics\",\"model\":\"FMS\",\"protocol\":\"FM4100\",\"version\":\"0.0.1\"}";
	public final static String GET_DEVICE_CONFIG_TEMPLATE_SUCCESS_RESP = "[{\"name\":\"test1\",\"deviceMake\":\"Teltonika\",\"deviceType\":\"Telematics\",\"deviceModel\":\"FMS\",\"deviceProtocol\":\"FM5300\",\"deviceProtocolVersion\":\"1.0.0\",\"configPoints\":[{\"pointId\":\"11\",\"pointName\":\"Analog 3\",\"type\":\"FLOAT\",\"unit\":\"litre\",\"displayName\":\"Fuel Level\",\"physicalQuantity\":\"Volume\",\"systemTag\":\"Power\",\"precedence\":\"2\",\"expression\":\"$\\\n{\\\nFuelLevel;\\\nif(EngineStatus eq 'OFF')\\\nreturn 'N/A';\\\nFuelLevel=convert:convertToDecimal(Analog3)/1000.00;\\\nif(!(FuelLevel ge 0.50 and FuelLevel le 2.60))\\\nFuelLevel='ERROR';\\\n else\\\n[FuelLevel=-39.663*FuelLevel*(12/VehicleBattery)+125,\\\nFuelLevel=number:formatDouble(FuelLevel,2)]\\\nFuelLevel;\\\n}\"},{\"pointId\":\"1\",\"pointName\":\"DIN1\",\"type\":\"STRING\",\"unit\":\"unitless\",\"displayName\":\"Engine Status\",\"physicalQuantity\":\"generic_quantity\",\"systemTag\":\"Power\",\"precedence\":\"1\",\"expression\":\"$\\\n{\\\nEngineStatus;\\\nEngineStatus=convert:convertToDecimal(DIN1)==1?'ON':'OFF';\\\nEngineStatus;\\\n}\"}]},{\"name\":\"Hyster3p0TX\",\"deviceMake\":\"Teltonika\",\"deviceType\":\"Telematics\",\"deviceModel\":\"FMS\",\"deviceProtocol\":\"FM5300\",\"deviceProtocolVersion\":\"1.0.0\",\"configPoints\":[{\"pointId\":\"1\",\"pointName\":\"DIN1\",\"type\":\"STRING\",\"unit\":\"unitless\",\"displayName\":\"Engine Status\",\"physicalQuantity\":\"generic_quantity\",\"systemTag\":\"Power\",\"precedence\":\"1\",\"expression\":\"$\\\n{\\\nEngineStatus;\\\nEngineStatus=convert:convertToDecimal(DIN1)==1?'ON':'OFF';\\\nEngineStatus;\\\n}\"},{\"pointId\":\"1\",\"pointName\":\"DIN1\",\"type\":\"STRING\",\"unit\":\"unitless\",\"displayName\":\"Motion Status\",\"physicalQuantity\":\"generic_quantity\",\"systemTag\":\"Power\",\"precedence\":\"3\",\"expression\":\"$\\\n{\\\nMotionStatus;\\\nif(EngineStatus eq 'OFF')\\\nMotionStatus='OFF';\\\nelse if(EngineStatus eq 'ON'  and DynamoStatus eq 'Inactive')\\\nMotionStatus='IDLE';\\\nelse if(EngineStatus eq 'ON'  and DynamoStatus eq 'Active' and SeatSwitch eq 'Active')\\\nMotionStatus=\\\"ON\\\";\\\nMotionStatus;\\\n}\"},{\"pointId\":\"11\",\"pointName\":\"Analog 3\",\"type\":\"FLOAT\",\"unit\":\"litre\",\"displayName\":\"Fuel Level\",\"physicalQuantity\":\"Volume\",\"systemTag\":\"Power\",\"precedence\":\"2\",\"expression\":\"$\\\n{\\\nFuelLevel;\\\nif(EngineStatus eq 'OFF')\\\nreturn 'N/A';\\\nFuelLevel=convert:convertToDecimal(Analog3)/1000.00;\\\nif(!(FuelLevel ge 0.50 and FuelLevel le 2.60))\\\nFuelLevel='ERROR';\\\n else\\\n[FuelLevel=-39.663*FuelLevel*(12/VehicleBattery)+125,\\\nFuelLevel=number:formatDouble(FuelLevel,2)];\\\nFuelLevel;\\\n}\"}]}]";
		
	public static final String INACTIVATE_DEVICE_CONFIG_TEMPLATES_SUMMARY = "De-activate device configuration templates";
	public static final String INACTIVATE_DEVICE_CONFIG_TEMPLATES_DESC = "This is the service to be used to deactivate device configuration templates,sample payload :[\"HySter1\",\"Teltonika\"]";
	
	public static final String GET_DEVICE_CONF_SUMMARY = "Get point configurations of a device";
	public static final String GET_DEVICE_CONF_DESC = "This is the service to be used to fetch point configurations of a device";
	public static final String GET_DEVICE_CONF_SUCCESS_RESP = "{ \"deviceMake\": \"Teltonika\", \"deviceType\": \"Telematics\", \"deviceModel\": \"FMS\", \"deviceProtocol\": \"FM4100\", \"deviceProtocolVersion\": \"0.0.1\", \"configPoints\": [ { \"pointId\": \"154\", \"pointName\": \"CAN9\", \"type\": \"STRING\", \"displayName\": \"Reactive Power C\", \"physicalQuantity\": \"generic_quantity\", \"systemTag\": \"Power\", \"precedence\": \"5\", \"expression\": \"$\n{\n\tREACTIVEPOWER;\n\tif(!(number:isNumber(PhaseCApparentPower) and number:isNumber(PhaseCPowerFactor)))\n\treturn 'ERROR';\n\t\n\tif(EngineStatus eq 'OFF')\n\t\treturn 0;\n\tREACTIVEPOWER=((PhaseCApparentPower)*math:sqrt((1-(math:pow(PhaseCPowerFactor,2)))));\n\tif(!(REACTIVEPOWER ge 0 and REACTIVEPOWER le 9999999999))\n\t\tREACTIVEPOWER='ERROR';\n\t\telse\n\tREACTIVEPOWER=number:formatDouble(REACTIVEPOWER,2);\n\tREACTIVEPOWER;\n}\" }, { \"pointId\": \"154\", \"pointName\": \"CAN9\", \"type\": \"STRING\", \"displayName\": \"Phase C Power Factor\", \"physicalQuantity\": \"generic_quantity\", \"systemTag\": \"Power\", \"precedence\": \"4\", \"expression\": \"$\n{\n\tPOWERFACTOR;\n\tif(!(number:isNumber(PhaseCActivePower) and number:isNumber(PhaseCApparentPower)))\n\treturn 'ERROR';\n\t\n\tif(EngineStatus eq 'OFF')\n\t\treturn 0;\n\tPOWERFACTOR=((PhaseCActivePower)/(PhaseCApparentPower));\n\tif(!(POWERFACTOR ge 0 and POWERFACTOR le 1))\n\t\tPOWERFACTOR='ERROR';\n\t\telse\n\tPOWERFACTOR=number:formatDouble(POWERFACTOR,2);\n\tPOWERFACTOR;\n}\" } ] }";

}
